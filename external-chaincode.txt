../../bin/peer lifecycle chaincode install /home/ewallet/network/external-builder/chaincode/simplecc-pkg.tgz 
../../bin/peer lifecycle chaincode queryinstalled
PACKAGE_ID=

SEQUENCE=1
../../bin/peer lifecycle chaincode approveformyorg -o $ORDERER_HOST:7050 --channelID $CHANNEL_NAME --name $CC_NAME --version $CC_VERSION --init-required --package-id $PACKAGE_ID --sequence $SEQUENCE --waitForEvent
../../bin/peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name $CC_NAME --version $CC_VERSION --init-required --sequence $SEQUENCE --output json
../../bin/peer lifecycle chaincode commit -o $ORDERER_HOST:7050 --channelID $CHANNEL_NAME --name $CC_NAME --version $CC_VERSION --sequence $SEQUENCE --init-required --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE
../../bin/peer chaincode invoke -o $ORDERER_HOST:7050 --isInit -C $CHANNEL_NAME -n $CC_NAME --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE -c '{"Args":["Init"]}'
../../bin/peer  chaincode invoke -o $ORDERER_HOST:7050 -C $CHANNEL_NAME -n $CC_NAME --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE -c '{"Args":["update"]}'





config external builder:

1. edit core.yaml
chaincode:
    externalBuilders: 
        - name: external-builder
          path: /home/nampkh/nampkh/my-fabric/network/external-builder
          environmentWhitelist:
            - GOPROXY
            - GONOPROXY
            - GOSUMDB
            - GONOSUMDB
            - GOCACHE
            - GOPATH
            - GOROOT
            - HOME
            - XDG_CACHE_HOME
...

    # There are 2 modes: "dev" and "net".
    # In dev mode, user runs the chaincode after starting peer from
    # command line on local machine.
    # In net mode, peer will run chaincode in a docker container.
    mode: dev

2. create external builder build tools
	external-builder/bin
		- detect
		- build
		- release
		- run

3. chaincode:
	(1) main function: use shim.ChaincodeServer
	Example:
	func main() {
		// The ccid is assigned to the chaincode on install (using the “peer lifecycle chaincode install <package>” command) for instance

		if len(os.Args) < 3 {
			fmt.Println("Please supply:\n- installed chaincodeID  (using the “peer lifecycle chaincode install <package>” command)\n- chaincode address (host:port)")
			return
		}

		ccid := os.Args[1]
		address := os.Args[2]

		server := &shim.ChaincodeServer{
			CCID:    ccid,
			Address: address,
			CC:      new(SimpleChaincode),
			TLSProps: shim.TLSProperties{
				Disabled: true,
			},
		}

		fmt.Println("Start Chaincode server on " + address)
		err := server.Start()
		if err != nil {
			fmt.Printf("Error starting Simple chaincode: %s", err)
			return
		}
	}

	(2) metatata.json: { "path": "external-builder/chaincode/simple-chaincode/src", "type": "golang", "label": "simplecc" }

	(3) connection.json: 
		{
		    "address": "peer0.org1.example.com:7053",
		    "dial_timeout": "10s",
		    "tls_required": false,
		    "client_auth_required": false,
		    "client_key": "-----BEGIN PRIVATE KEY-----MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgZMiAUY35kNOGMyO9ZMQMLO8YvgCKZwpYn4erbSwsfUChRANCAAS6fFYl3B5inAaDAWYr9Yi8E63WL/8jSFJ/QLi84FjJrsmCgZApFgvZcK3MXVRdcme5gRoAhHosRXue65U+6X6k-----END PRIVATE KEY-----",
		    "client_cert": "-----BEGIN CERTIFICATE-----MIICOjCCAeGgAwIBAgIQdOdy1r6H2M7gcTr8EO4SszAKBggqhkjOPQQDAjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0GA1UEAxMWdGxzY2Eub3JnMS5leGFtcGxlLmNvbTAeFw0yMDA3MjAwMzM0MDBaFw0zMDA3MTgwMzM0MDBaMFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMR8wHQYDVQQDDBZBZG1pbkBvcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEunxWJdweYpwGgwFmK/WIvBOt1i//I0hSf0C4vOBYya7JgoGQKRYL2XCtzF1UXXJnuYEaAIR6LEV7nuuVPul+pKNsMGowDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIGpzc94Abo5v8J6D5hyWcEFRWe48zz6BcylTeOMK09p/MAoGCCqGSM49BAMCA0cAMEQCIFQvDnuron+eMEIzVXyYqZ3MYTc53hiN6WO47s8nzTxwAiB1NJFtocnQSUHj+EVrf0op0jqz+N7x1xm+/yf3ZzwV7A==-----END CERTIFICATE-----",
		    "root_cert": "-----BEGIN CERTIFICATE-----MIICWDCCAf6gAwIBAgIRAPBOPl+PSWwl57p0fc8vdWowCgYIKoZIzj0EAwIwdjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHzAdBgNVBAMTFnRsc2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMjAwNzIwMDMzNDAwWhcNMzAwNzE4MDMzNDAwWjB2MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0GA1UEAxMWdGxzY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABMWQqV5bTGDXXeetSwKA/dTv50L4l3ZFVEvRGdr+uF/PghjZZH9HRhaJVA8NcOaYVadZgWk5xkxLf9oYQSO9AuSjbTBrMA4GA1UdDwEB/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQganNz3gBujm/wnoPmHJZwQVFZ7jzPPoFzKVN44wrT2n8wCgYIKoZIzj0EAwIDSAAwRQIgaNBD+Fe7CGxU4WRlamCEclyGqKLXbYkfE6VIJwRvEAgCIQCRkjShgATojjXn13/CglneWfXYQrbqvIxD4dl6oBi/DQ==-----END CERTIFICATE-----"
		}

=> run compress.sh